{"version":3,"sources":["../../../../src/react/components/table-of-contents.jsx"],"names":["React","PureComponent","ControlledToc","isOpen","entry","expanded","id","childIsSelected","updateHeights","tocEntries","Object","values","forEach","tocEntry","children","queue","height","length","current","shift","c","push","getTocState","chapters","slug","entries","map","chapter","i","parents","child","concat","isSelected","childMdx","fields","path","parent","TableOfContents","props","firstItemIsExpanded","tocState","state","toggleEntry","bind","prevProps","setState","updatedExpanded","updatedTocState","tree"],"mappings":"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","sourcesContent":["/* eslint-disable operator-assignment */\n/* eslint-disable no-param-reassign */\n/* eslint-disable prefer-const */\n// Copyright (c) 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport React, {PureComponent} from 'react';\nimport ControlledToc from './table-of-contents.component';\n\n// util functions to pre-process the TOC\n\nfunction isOpen(entry, expanded) {\n  // this is all the reasons why a given toc entry with children could\n  // be expanded.\n  // either it's manually expanded, or it's on the active route and\n  // it's not manually collapsed.\n  return expanded[entry.id] === true || (entry.childIsSelected && expanded[entry.id] !== false);\n}\n\nfunction updateHeights(tocEntries, expanded) {\n  // at this stage we know which entries are expanded or not, whether manually\n  // or because they contain the active page. now let's compute their heights\n\n  // why is it important to compute heights? because without an an absolute\n  // number we can't transition on height and have smooth collapse effects.\n\n  Object.values(tocEntries).forEach((tocEntry) => {\n    if (tocEntry.children) {\n      if (isOpen(tocEntry, expanded)) {\n        let queue = [tocEntry];\n        let height = -1;\n        while (queue.length) {\n          const current = queue.shift();\n          height = height + 1;\n          if (isOpen(current, expanded)) {\n            current.children.forEach((c) => queue.push(tocEntries[c]));\n          }\n        }\n        tocEntry.height = height;\n      } else {\n        tocEntry.height = 0;\n      }\n    }\n  });\n  return tocEntries;\n}\n\nfunction getTocState({chapters, slug, expanded}) {\n  // we try to generate the height of each toc entry and whether it's expanded\n  // or not based on the toc structure (chapters), whether some entries are\n  // manually expanded or not (open) and what's the current page (slug)\n\n  // there may be a lot of code but this goes very fast even for long tocs.\n\n  // one way to uniquely identify entries is by creating an id made of the\n  // index position of all of its parents and itself.\n  // ie [2, 0, 1] - 3nd chapter, 1st entry, 2nd item.\n\n  const entries = {};\n  let queue = chapters.map((chapter, i) => ({\n    ...chapter,\n    id: [i],\n    parents: []\n  }));\n  while (queue.length) {\n    const current = queue.shift();\n    const {id} = current;\n    entries[id] = {id};\n\n    const children = (current.chapters || current.entries || []).map((child, i) => ({\n      ...child,\n      id: id.concat(i),\n      parents: [...current.parents, id]\n    }));\n    if (children.length) {\n      entries[id].children = children.map((c) => c.id);\n    }\n    children.forEach((c) => queue.push(c));\n\n    let isSelected = current.childMdx\n      ? current.childMdx.fields.slug === slug\n      : current.path === slug;\n    if (isSelected) {\n      // only happens for leave nodes\n      current.parents.forEach((parent) => {\n        entries[parent].childIsSelected = true;\n        // currently the behavior of entries is to toggle them\n        // if we switch to using them as link to the first child (as before)\n        // we can just uncomment that line\n        // entries[parent].pathToFirstChild = current.childMdx.fields.slug;\n      });\n    }\n    entries[id].isSelected = isSelected;\n  }\n  return updateHeights(entries, expanded);\n}\n\nexport default class TableOfContents extends PureComponent {\n  constructor(props) {\n    super(props);\n    const {slug, chapters, firstItemIsExpanded} = props;\n    const expanded = firstItemIsExpanded ? {0: true} : {};\n    const tocState = getTocState({slug, chapters, expanded});\n\n    // tocState contains the state of the TOC with information such as\n    // what is the current height of an entry?\n    // is an entry selected or is any of its children selected?\n    // expanded records whether the user manually expanded or collapsed\n    // a section of the TOC.\n    // why keep them separated? tocState get regenerated for instance\n    // when the slug changes (which may mean that some sections get expanded/collapsed)\n    // we don't want to overwrite the manual actions of the user in that case.\n    // instead, we first apply the \"organic\" changes of the toc, then on top of that\n    // we add the results of the user's action\n\n    this.state = {\n      tocState,\n      expanded\n    };\n    this.toggleEntry = this.toggleEntry.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {chapters, slug, firstItemIsExpanded} = this.props;\n    if (slug !== prevProps.slug || chapters !== prevProps.chapters) {\n      const expanded =\n        chapters === prevProps.chapters\n          ? this.state.expanded\n          : firstItemIsExpanded\n          ? {0: true}\n          : {};\n      const tocState = getTocState({chapters, slug, expanded});\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({\n        tocState,\n        expanded\n      });\n    }\n  }\n\n  toggleEntry(id) {\n    const {expanded, tocState} = this.state;\n    let updatedExpanded = {...expanded};\n    const entry = tocState[id];\n\n    // if this entry has been manually expanded, then we manually collapse it.\n    // else - either this entry has never been manually expanded/collapsed,\n    // or it has been manually collapsed - we expand it.\n    updatedExpanded[id] = !isOpen(entry, expanded);\n    // then we need to update the heights.\n    const updatedTocState = updateHeights({...tocState}, updatedExpanded);\n\n    this.setState({\n      tocState: updatedTocState,\n      expanded: updatedExpanded\n    });\n  }\n\n  render() {\n    const {chapters: tree} = this.props;\n    const {tocState} = this.state;\n\n    if (!tree) {\n      return null;\n    }\n    return <ControlledToc tree={tree} tocState={tocState} toggleEntry={this.toggleEntry} />;\n  }\n}\n"],"file":"table-of-contents.js"}