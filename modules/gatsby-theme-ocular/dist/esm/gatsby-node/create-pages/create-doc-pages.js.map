{"version":3,"sources":["../../../../src/gatsby-node/create-pages/create-doc-pages.js"],"names":["require","log","COLOR","PAGE_TEMPLATES","addToRelativeLinks","queryMarkdownDocs","graphql","then","result","errors","console","Error","createDocMarkdownPages","ocularOptions","actions","createPage","rootFolder","ROOT_FOLDER","pathToSlug","data","allMdx","edges","map","node","source","fileAbsolutePath","target","fields","slug","forEach","edge","relativeLinks","componentUrl","path","component","context","title","frontmatter","description","excerpt","toc","module","exports","createDocPages","color","CYAN","priority"],"mappings":"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","sourcesContent":["const {log, COLOR} = require('../../utils/log');\nconst PAGE_TEMPLATES = require('./page-templates');\nconst {addToRelativeLinks} = require('../../utils/links-utils');\n\n// Create static pages\n// NOTE: gatsby does automatically build pages from **top level** `/pages`, folder\n// but in ocular we keep those pages in the installed structure so gatsby can't see them\n\nfunction queryMarkdownDocs(graphql) {\n  return graphql(\n    `\n      {\n        allMdx {\n          edges {\n            node {\n              fileAbsolutePath\n              excerpt\n              frontmatter {\n                title\n              }\n              fields {\n                slug\n                path\n              }\n            }\n          }\n        }\n        site {\n          siteMetadata {\n            config {\n              ROOT_FOLDER\n            }\n          }\n        }\n      }\n    `\n  ).then((result) => {\n    if (result.errors) {\n      /* eslint no-console: \"off\" */\n      console.log(result.errors);\n      throw new Error(result.errors);\n    }\n    return result;\n  });\n}\n\n// Walks all markdown nodes and creates a doc page for each node\nfunction createDocMarkdownPages({graphql, actions}, ocularOptions) {\n  const {createPage} = actions;\n\n  return queryMarkdownDocs(graphql).then((result) => {\n    const rootFolder = ocularOptions.ROOT_FOLDER;\n    const pathToSlug = result.data.allMdx.edges.map(({node}) => ({\n      source: node.fileAbsolutePath,\n      target: node.fields.slug\n    }));\n\n    result.data.allMdx.edges.forEach((edge) => {\n      let relativeLinks = {};\n      pathToSlug.forEach(({source, target}) => {\n        relativeLinks = addToRelativeLinks({\n          source,\n          target,\n          rootFolder,\n          edge,\n          relativeLinks,\n          ocularOptions\n        });\n      });\n\n      // console.log('Creating doc page at', edge.node.fields.path);\n\n      const componentUrl = PAGE_TEMPLATES['DOC_MARKDOWN_PAGE_URL'];\n\n      createPage({\n        path: edge.node.fields.path,\n        component: componentUrl,\n        context: {\n          relativeLinks,\n          title: edge.node.frontmatter.title,\n          description: edge.node.fields.excerpt,\n          slug: edge.node.fields.path,\n          toc: 'docs'\n        }\n      });\n    });\n  });\n}\n\nmodule.exports = function createDocPages({graphql, actions}, ocularOptions) {\n  log.log({color: COLOR.CYAN, priority: 1}, `Creating docs pages...`)();\n\n  return createDocMarkdownPages({graphql, actions}, ocularOptions);\n};\n"],"file":"create-doc-pages.js"}