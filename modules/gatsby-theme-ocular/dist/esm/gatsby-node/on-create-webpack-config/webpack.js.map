{"version":3,"sources":["../../../../src/gatsby-node/on-create-webpack-config/webpack.js"],"names":["require","onCreateWebpackConfig","module","exports","onCreateWebpackConfigOverride","opts","stage","loaders","actions","console","log","newJSRule","js","Object","assign","test","exclude","modulePath","rules","push","use","null","newConfig","node","fs","setWebpackConfig"],"mappings":"AAAA,eAAgCA,OAAO,CAAC,4BAAD,CAAvC;AAAA,IAAOC,qBAAP,YAAOA,qBAAP;;AAEAC,MAAM,CAACC,OAAP,CAAeF,qBAAf,GAAuC,SAASG,6BAAT,CAAuCC,IAAvC,EAA6C;AAClFJ,EAAAA,qBAAqB,CAACI,IAAD,CAArB;AAEA,MACEC,KADF,GAOID,IAPJ,CACEC,KADF;AAAA,MAKEC,OALF,GAOIF,IAPJ,CAKEE,OALF;AAAA,MAMEC,OANF,GAOIH,IAPJ,CAMEG,OANF;AASAC,EAAAA,OAAO,CAACC,GAAR;AAaA,MAAMC,SAAS,GAAGJ,OAAO,CAACK,EAAR,EAAlB;AAEAC,EAAAA,MAAM,CAACC,MAAP,CAAcH,SAAd,EAAyB;AAEvBI,IAAAA,IAAI,EAAE,SAFiB;AAKvBC,IAAAA,OAAO,EAAE,iBAACC,UAAD;AAAA,aACP,eAAeF,IAAf,CAAoBE,UAApB,KACA,CAAC,2DAA2DF,IAA3D,CAAgEE,UAAhE,CAFM;AAAA;AALc,GAAzB;AAWA,MAAMC,KAAK,GAAG,CAACP,SAAD,CAAd;;AAEA,MAAIL,KAAK,KAAK,YAAd,EAA4B;AAC1BY,IAAAA,KAAK,CAACC,IAAN,CAAW;AACTJ,MAAAA,IAAI,EAAE,WADG;AAETK,MAAAA,GAAG,EAAEb,OAAO,CAACc,IAAR;AAFI,KAAX;AAID;;AAED,MAAMC,SAAS,GAAG;AAChBpB,IAAAA,MAAM,EAAE;AACNgB,MAAAA,KAAK,EAALA;AADM,KADQ;AAIhBK,IAAAA,IAAI,EAAE;AACJC,MAAAA,EAAE,EAAE;AADA;AAJU,GAAlB;AAaAhB,EAAAA,OAAO,CAACiB,gBAAR,CAAyBH,SAAzB;AACD,CA7DD","sourcesContent":["const {onCreateWebpackConfig} = require('./on-create-webpack-config');\n\nmodule.exports.onCreateWebpackConfig = function onCreateWebpackConfigOverride(opts) {\n  onCreateWebpackConfig(opts);\n\n  const {\n    stage, // build stage: ‘develop’, ‘develop-html’, ‘build-javascript’, or ‘build-html’\n    // rules, // Object (map): set of preconfigured webpack config rules\n    // plugins, // Object (map): A set of preconfigured webpack config plugins\n    // getConfig, // Function that returns the current webpack config\n    loaders, // Object (map): set of preconfigured webpack config loaders\n    actions\n  } = opts;\n\n  console.log(`App rewriting gatsby webpack config`); // eslint-disable-line\n\n  // Recreate it with custom exclude filter\n  // Called without any arguments, `loaders.js` will return an\n  // object like:\n  // {\n  //   options: undefined,\n  //   loader: '/path/to/node_modules/gatsby/dist/utils/babel-loader.js',\n  // }\n  // Unless you're replacing Babel with a different transpiler, you probably\n  // want this so that Gatsby will apply its required Babel\n  // presets/plugins.  This will also merge in your configuration from\n  // `babel.config.js`.\n  const newJSRule = loaders.js();\n\n  Object.assign(newJSRule, {\n    // JS and JSX\n    test: /\\.jsx?$/,\n\n    // Exclude all node_modules from transpilation, except for ocular\n    exclude: (modulePath) =>\n      /node_modules/.test(modulePath) &&\n      !/node_modules\\/(ocular|ocular-gatsby|gatsby-theme-ocular)/.test(modulePath)\n  });\n\n  // Omit the default rule where test === '\\.jsx?$'\n  const rules = [newJSRule];\n\n  if (stage === 'build-html') {\n    rules.push({\n      test: /mapbox-gl/,\n      use: loaders.null()\n    });\n  }\n\n  const newConfig = {\n    module: {\n      rules\n    },\n    node: {\n      fs: 'empty'\n    }\n  };\n\n  // Completely replace the webpack config for the current stage.\n  // This can be dangerous and break Gatsby if certain configuration options are changed.\n  // Generally only useful for cases where you need to handle config merging logic yourself,\n  // in which case consider using webpack-merge.\n  actions.setWebpackConfig(newConfig);\n};\n"],"file":"webpack.js"}