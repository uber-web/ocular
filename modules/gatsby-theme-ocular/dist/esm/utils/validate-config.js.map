{"version":3,"sources":["../../../src/utils/validate-config.js"],"names":["validate","require","log","COLOR","validators","anyString","value","options","allowEmpty","isString","message","arrayValidate","key","constraint","isArray","length","messages","map","v","isObject","single","filter","Boolean","m","idx","Object","values","objectValidate","requiredForGitHubProject","prerequisite","attributes","PROJECT_TYPE","WILL_DEPRECATED","module","exports","validateConfig","config","constraints","unusedProperties","keys","deprecatedProperties","includes","allMessages","toString","forEach","color","RED","priority"],"mappings":";;AACA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAxB;;AACA,eAAqBA,OAAO,CAAC,OAAD,CAA5B;AAAA,IAAOC,GAAP,YAAOA,GAAP;AAAA,IAAYC,KAAZ,YAAYA,KAAZ;;AA6BAH,QAAQ,CAACI,UAAT,CAAoBC,SAApB,GAAgC,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,OAA1B,EAAmC;AACjE,MAAI,CAACD,KAAD,IAAUC,OAAO,CAACC,UAAtB,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,MAAI,CAACR,QAAQ,CAACS,QAAT,CAAkBH,KAAlB,CAAL,EAA+B;AAC7B,WAAOC,OAAO,CAACG,OAAf;AACD;;AAED,SAAO,IAAP;AACD,CAVD;;AAqBAV,QAAQ,CAACI,UAAT,CAAoBO,aAApB,GAAoC,SAASA,aAAT,CAAuBL,KAAvB,EAA8BC,OAA9B,EAAuCK,GAAvC,EAA4C;AAC9E,MAAOJ,UAAP,GAAiCD,OAAjC,CAAOC,UAAP;AAAA,MAAmBK,UAAnB,GAAiCN,OAAjC,CAAmBM,UAAnB;;AACA,MAAI,CAACP,KAAD,IAAUE,UAAd,EAA0B;AACxB,WAAO,IAAP;AACD;;AAED,MAAI,CAACR,QAAQ,CAACc,OAAT,CAAiBR,KAAjB,CAAL,EAA8B;AAC5B,qBAAUM,GAAV;AACD;;AACD,MAAIN,KAAK,CAACS,MAAN,KAAiB,CAAjB,IAAsB,CAACP,UAA3B,EAAuC;AACrC,qBAAUI,GAAV;AACD;;AAED,MAAMI,QAAQ,GAAGV,KAAK,CACnBW,GADc,CACV,UAACC,CAAD,EAAO;AACV,QAAIlB,QAAQ,CAACmB,QAAT,CAAkBD,CAAlB,CAAJ,EAA0B;AACxB,aAAOlB,QAAQ,CAACkB,CAAD,EAAIL,UAAJ,CAAf;AACD;;AACD,WAAOb,QAAQ,CAACoB,MAAT,CAAgBF,CAAhB,EAAmBL,UAAnB,CAAP;AACD,GANc,EAOdQ,MAPc,CAOPC,OAPO,CAAjB;;AAQA,MAAIN,QAAQ,CAACD,MAAT,GAAkB,CAAtB,EAAyB;AAEvB,WAAOC,QAAQ,CAACC,GAAT,CAAa,UAACM,CAAD,EAAIC,GAAJ;AAAA,uBAAeZ,GAAf,cAAsBY,GAAtB,gBAA+BC,MAAM,CAACC,MAAP,CAAcH,CAAd,CAA/B;AAAA,KAAb,CAAP;AACD;;AAED,SAAO,IAAP;AACD,CA3BD;;AAoCAvB,QAAQ,CAACI,UAAT,CAAoBuB,cAApB,GAAqC,SAASA,cAAT,CAAwBrB,KAAxB,EAA+BC,OAA/B,EAAwCK,GAAxC,EAA6C;AAEhF,MAAI,CAACZ,QAAQ,CAACmB,QAAT,CAAkBb,KAAlB,CAAL,EAA+B;AAC7B,qBAAUM,GAAV;AACD;;AAGD,SAAO,IAAP;AACD,CARD;;AAmBAZ,QAAQ,CAACI,UAAT,CAAoBwB,wBAApB,GAA+C,SAASC,YAAT,CAC7CvB,KAD6C,EAE7CC,OAF6C,EAG7CK,GAH6C,EAI7CkB,UAJ6C,EAK7C;AACA,MAAIA,UAAU,CAACC,YAAX,KAA4B,QAA5B,IAAwC,CAACzB,KAA7C,EAAoD;AAClD,WAAOC,OAAO,CAACG,OAAf;AACD;;AACD,SAAO,IAAP;AACD,CAVD;;AAYA,IAAMsB,eAAe,GAAG,CAAC,YAAD,CAAxB;;AAGAC,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,MAAxB,EAAgCC,WAAhC,EAA6C;AAE5D,MAAMC,gBAAgB,GAAGb,MAAM,CAACc,IAAP,CAAYH,MAAZ,EAAoBf,MAApB,CAA2B,UAACT,GAAD;AAAA,WAAS,CAACyB,WAAW,CAACzB,GAAD,CAArB;AAAA,GAA3B,CAAzB;AACA,MAAM4B,oBAAoB,GAAGf,MAAM,CAACc,IAAP,CAAYH,MAAZ,EAAoBf,MAApB,CAA2B,UAACT,GAAD;AAAA,WAASoB,eAAe,CAACS,QAAhB,CAAyB7B,GAAzB,CAAT;AAAA,GAA3B,CAA7B;AAGA,MAAMI,QAAQ,GAAGhB,QAAQ,CAACoC,MAAD,EAASC,WAAT,CAAR,IAAiC,EAAlD;AACA,MAAMK,WAAW,gCACZJ,gBAAgB,CAACrB,GAAjB,CAAqB,UAACL,GAAD;AAAA,qBAAYA,GAAZ;AAAA,GAArB,CADY,sBAEZ4B,oBAAoB,CAACvB,GAArB,CAAyB,UAACL,GAAD;AAAA,qBAAYA,GAAZ;AAAA,GAAzB,CAFY,sBAGZa,MAAM,CAACc,IAAP,CAAYvB,QAAZ,EAAsBC,GAAtB,CAA0B,UAACL,GAAD;AAAA,WAASI,QAAQ,CAACJ,GAAD,CAAR,CAAc+B,QAAd,EAAT;AAAA,GAA1B,CAHY,EAAjB;AAMAD,EAAAA,WAAW,CAACE,OAAZ,CAAoB,UAAClC,OAAD;AAAA,WAClBR,GAAG,CAACA,GAAJ,CAAQ;AAAC2C,MAAAA,KAAK,EAAE1C,KAAK,CAAC2C,GAAd;AAAmBC,MAAAA,QAAQ,EAAE;AAA7B,KAAR,4BAA4DrC,OAA5D,IADkB;AAAA,GAApB;AAGA,SAAOgC,WAAP;AACD,CAjBD","sourcesContent":["// [Validate.js](http://validatejs.org/)\nconst validate = require('validate.js');\nconst {log, COLOR} = require('./log');\n\n// TODO(@javidhsueh): theoretically, we should be able to validate the local path and url with regex below.\n// Format validator: http://validatejs.org/#validators-format\n// const LOCAL_FILE_PATH = /^((\\.\\.|[a-zA-Z0-9_/\\-\\\\])*\\.[a-zA-Z0-9]+)/g;\n// const URL_PATH_PATTERN = /^\\/([A-z0-9-_+]+\\/)*([A-z0-9])*$/g;\n\n// validators we used below:\n// [numericality](http://validatejs.org/#validators-numericality)\n// check if the value is a valid number\n//\n// [presence](http://validatejs.org/#validators-presence)\n// The presence validator validates that the value is defined.\n//\n// [url](http://validatejs.org/#validators-url)\n// The URL validator ensures that the input is a valid URL.\n//\n// [custom validator](http://validatejs.org/#custom-validator)\n// See below\n\n/**\n * Validate if the value is a string (null is allowed).\n * @param  {String} value   The string to be validated.\n * @param  {Object} options The options for validation.\n *         {String} options.message  Custom message when the value is invalid.\n *         {Bool}   options.allowEmpty  Allow the string is empty/undefined/null.\n * @param  {String} key     The key of the string\n * @return {String}         The validation result(a string). Return null if passes.\n */\nvalidate.validators.anyString = function anyString(value, options) {\n  if (!value && options.allowEmpty) {\n    return null;\n  }\n  // check value is string\n  if (!validate.isString(value)) {\n    return options.message;\n  }\n  // pass validation\n  return null;\n};\n\n/**\n * Check every element in an array of objects\n * @param  {Array} value    The array to be validated.\n * @param  {Object} options The options for validation.\n *         {Object} options.constraint  The constraint for validating each object in the array.\n *         {Bool}   options.allowEmpty  Allow the array is empty.\n * @param  {String} key     The key of the array\n * @return {String|Array}   The validation result(a string or a list of strings). Return null if passes.\n */\nvalidate.validators.arrayValidate = function arrayValidate(value, options, key) {\n  const {allowEmpty, constraint} = options;\n  if (!value && allowEmpty) {\n    return null;\n  }\n  // check value is array\n  if (!validate.isArray(value)) {\n    return `${key} needs to be an array.`;\n  }\n  if (value.length === 0 && !allowEmpty) {\n    return `${key} cannot be empty.`;\n  }\n  // check every element in the array\n  const messages = value\n    .map((v) => {\n      if (validate.isObject(v)) {\n        return validate(v, constraint);\n      }\n      return validate.single(v, constraint);\n    })\n    .filter(Boolean);\n  if (messages.length > 0) {\n    // consolidate error messages of each element\n    return messages.map((m, idx) => `${key}[${idx}]: ${Object.values(m)}`);\n  }\n  // pass validation\n  return null;\n};\n\n/**\n * Check if the value is an object.\n * @param  {Object} value   The object to be validated.\n * @param  {Object} options Not used at this momemt.\n * @param  {String} key     The key of the object\n * @return {String|Array}   The validation result(a string). Return null if passes.\n */\nvalidate.validators.objectValidate = function objectValidate(value, options, key) {\n  // check value is object\n  if (!validate.isObject(value)) {\n    return `${key} needs to be an object.`;\n  }\n  // TODO(@javidhsueh): we could validate the object properties, too.\n  // pass validation\n  return null;\n};\n\n/**\n * Check the value cannot be blank when project type is github.\n * @param  {Any} value   The value to be validated.\n * @param  {Object} options The options for validation.\n *         {String}   options.message  Custom message when the value is invalid\n * @param  {String} key     The key of the value.\n * @param  {Object} attributes The entire object to be examined.\n * @return {String|Array}   The validation result(a string). Return null if passes.\n */\nvalidate.validators.requiredForGitHubProject = function prerequisite(\n  value,\n  options,\n  key,\n  attributes\n) {\n  if (attributes.PROJECT_TYPE === 'github' && !value) {\n    return options.message;\n  }\n  return null;\n};\n\nconst WILL_DEPRECATED = ['DOC_FOLDER'];\n\n// validate the config and return a list of warnings.\nmodule.exports = function validateConfig(config, constraints) {\n  // check unused/deprecated config\n  const unusedProperties = Object.keys(config).filter((key) => !constraints[key]);\n  const deprecatedProperties = Object.keys(config).filter((key) => WILL_DEPRECATED.includes(key));\n  // check config, validate function will return a object with corresponding warnings.\n  // ex: {GITHUB_KEY: ['must be provided if your project is hosted on GitHub.']}\n  const messages = validate(config, constraints) || {};\n  const allMessages = [\n    ...unusedProperties.map((key) => `${key} is not used in the gatsby config.`),\n    ...deprecatedProperties.map((key) => `${key} will be deprecated soon.`),\n    ...Object.keys(messages).map((key) => messages[key].toString())\n  ];\n  // print out all warnings\n  allMessages.forEach((message) =>\n    log.log({color: COLOR.RED, priority: 0}, `[gatsby-config] ${message}`)()\n  );\n  return allMessages;\n};\n"],"file":"validate-config.js"}