{"version":3,"sources":["../../../../src/react/components/markdown.jsx"],"names":["CustomLinkWrapper","path","relativeLinks","config","CustomLink","href","props","updatedLink","CustomPre","children","otherProps","React","Children","map","child","type","displayName","cloneElement","API_REGEX","CODE_REGEX","CustomHeader","ComponentType","id","anchors","test","match","replace","$0","$1","suffix","slice","autolink","key","HeaderWrapper","components","h1","H1","h2","H2","h3","H3","h4","H4","h5","H5","h6","H6","p","P","ul","List","li","ListItem","pre","img","Img","code","InlineCode","table","Table","th","TableHeaderCell","td","TableBodyCell","blockquote","BlockQuote","a","A","body"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAMA;;AAsBA;;;;;;;;;;AAEA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,IAAD,EAAOC,aAAP,EAAsBC,MAAtB,EAAiC;AACzD,MAAMC,UAAU,GAAG,SAAbA,UAAa,OAAsB;AAAA,QAApBC,IAAoB,QAApBA,IAAoB;AAAA,QAAXC,KAAW;AACvC,QAAMC,WAAW,GAAG,4BAAWF,IAAX,EAAiBJ,IAAjB,EAAuBC,aAAvB,EAAsCC,MAAtC,CAApB;AACA,WAAOI,WAAW,GAAG,6BAAC,mBAAD;AAAS,MAAA,EAAE,EAAEA;AAAb,OAA8BD,KAA9B,EAAH,GAA6C,6BAAC,aAAD;AAAG,MAAA,IAAI,EAAED;AAAT,OAAmBC,KAAnB,EAA/D;AACD,GAHD;;AAIA,SAAOF,UAAP;AACD,CAND;;AAQA,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAACF,KAAD,EAAW;AAI3B,MAAOG,QAAP,GAAkCH,KAAlC,CAAOG,QAAP;AAAA,MAAoBC,UAApB,0CAAkCJ,KAAlC;AACA,SACE,6BAAC,eAAD,EAASI,UAAT,EACGC,eAAMC,QAAN,CAAeC,GAAf,CAAmBJ,QAAnB,EAA6B,UAACK,KAAD,EAAW;AAGvC,QAAIA,KAAK,CAACC,IAAN,KAAe,MAAf,IAAyBD,KAAK,CAACC,IAAN,CAAWC,WAAX,KAA2B,cAAxD,EAAwE;AACtE,aAAO,6BAAC,qBAAD,EAAeF,KAAK,CAACR,KAArB,CAAP;AACD;;AAED,WAAOK,eAAMM,YAAN,CAAmBH,KAAnB,CAAP;AACD,GARA,CADH,CADF;AAaD,CAlBD;;AAoBA,IAAMI,SAAS,GAAG,mCAAlB;AACA,IAAMC,UAAU,GAAG,mCAAnB;;AAGA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,aAAD,EAAgBC,EAAhB,EAAoBhB,KAApB,EAA2BiB,OAA3B,EAAuC;AAC1D,MAAI,CAACD,EAAL,EAAS;AACP,WAAO,6BAAC,aAAD,EAAmBhB,KAAnB,CAAP;AACD;;AAED,MAAIY,SAAS,CAACM,IAAV,CAAeF,EAAf,CAAJ,EAAwB;AACtBA,IAAAA,EAAE,GAAGA,EAAE,CAACG,KAAH,CAASP,SAAT,EAAoB,CAApB,CAAL;AACD,GAFD,MAEO;AACLI,IAAAA,EAAE,GAAGA,EAAE,CAACI,OAAH,CAAWP,UAAX,EAAuB,UAACQ,EAAD,EAAKC,EAAL;AAAA,aAAYA,EAAZ;AAAA,KAAvB,CAAL;AACD;;AAED,MAAIL,OAAO,CAACD,EAAD,CAAX,EAAiB;AACf,QAAIO,MAAM,GAAG,CAAb;;AACA,WAAON,OAAO,WAAID,EAAJ,cAAUO,MAAV,EAAd;AAAmCA,MAAAA,MAAM;AAAzC;;AACAP,IAAAA,EAAE,aAAMA,EAAN,cAAYO,MAAZ,CAAF;AACD;;AACDN,EAAAA,OAAO,CAACD,EAAD,CAAP,GAAc,IAAd;AAEA,MAAMb,QAAQ,GAAGH,KAAK,CAACG,QAAN,CAAeqB,KAAf,EAAjB;AACA,MAAMC,QAAQ,GAAGtB,QAAQ,CAAC,CAAD,CAAzB;;AACA,MAAIsB,QAAQ,CAACzB,KAAT,IAAkByB,QAAQ,CAACzB,KAAT,CAAeD,IAArC,EAA2C;AACzCI,IAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,yBAAasB,QAAb,EAAuB;AAACC,MAAAA,GAAG,EAAE,QAAN;AAAgB3B,MAAAA,IAAI,aAAMiB,EAAN;AAApB,KAAvB,CAAd;AACD;;AACD,SACE,6BAAC,aAAD,6BAAmBhB,KAAnB;AAA0B,IAAA,EAAE,EAAEgB;AAA9B,MACGb,QADH,CADF;AAKD,CA5BD;;eA8Be,kBAACH,KAAD,EAAW;AACxB,MAAOJ,aAAP,GAAsCI,KAAtC,CAAOJ,aAAP;AAAA,MAAsBD,IAAtB,GAAsCK,KAAtC,CAAsBL,IAAtB;AAAA,MAA4BE,MAA5B,GAAsCG,KAAtC,CAA4BH,MAA5B;AAGA,MAAMoB,OAAO,GAAG,EAAhB;;AACA,MAAMU,aAAa,GAAG,SAAhBA,aAAgB,CAACZ,aAAD,EAAmB;AACvC,WAAO;AAAA,UAAEC,EAAF,SAAEA,EAAF;AAAA,UAAShB,KAAT;AAAA,aAAoBc,YAAY,CAACC,aAAD,EAAgBC,EAAhB,EAAoBhB,KAApB,EAA2BiB,OAA3B,CAAhC;AAAA,KAAP;AACD,GAFD;;AAIA,MAAMW,UAAU,GAAG;AACjBC,IAAAA,EAAE,EAAEC,cADa;AAEjBC,IAAAA,EAAE,EAAEJ,aAAa,CAACK,cAAD,CAFA;AAGjBC,IAAAA,EAAE,EAAEN,aAAa,CAACO,cAAD,CAHA;AAIjBC,IAAAA,EAAE,EAAER,aAAa,CAACS,cAAD,CAJA;AAKjBC,IAAAA,EAAE,EAAEV,aAAa,CAACW,cAAD,CALA;AAMjBC,IAAAA,EAAE,EAAEZ,aAAa,CAACa,cAAD,CANA;AAOjBC,IAAAA,CAAC,EAAEC,aAPc;AAQjBC,IAAAA,EAAE,EAAEC,gBARa;AASjBC,IAAAA,EAAE,EAAEC,oBATa;AAUjBC,IAAAA,GAAG,EAAE7C,SAVY;AAWjB8C,IAAAA,GAAG,EAAEC,eAXY;AAYjBC,IAAAA,IAAI,EAAEC,sBAZW;AAajBC,IAAAA,KAAK,EAAEC,iBAbU;AAcjBC,IAAAA,EAAE,EAAEC,2BAda;AAejBC,IAAAA,EAAE,EAAEC,yBAfa;AAgBjBC,IAAAA,UAAU,EAAEC,sBAhBK;AAiBjBC,IAAAA,CAAC,EAAEhE,aAAa,GAAGF,iBAAiB,CAACC,IAAD,EAAOC,aAAP,EAAsBC,MAAtB,CAApB,GAAoDgE;AAjBnD,GAAnB;AAoBA,SACE,6BAAC,mBAAD;AAAa,IAAA,UAAU,EAAEjC;AAAzB,KACE,6BAAC,4BAAD,QAAc5B,KAAK,CAAC8D,IAApB,CADF,CADF;AAKD,C","sourcesContent":["import React, {cloneElement} from 'react';\nimport {MDXRenderer} from 'gatsby-plugin-mdx';\nimport {MDXProvider} from '@mdx-js/react';\n\n// note - these typographic elements are taken directly from baseui.\n// we can consider customizing them by first importing in styled/index, then\n// giving them special parameters\n\nimport {\n  A,\n  GatsbyA,\n  CodeBlock,\n  H1,\n  H2,\n  H3,\n  H4,\n  H5,\n  H6,\n  InlineCode,\n  P,\n  List,\n  ListItem,\n  Pre,\n  Img,\n  BlockQuote,\n  Table,\n  TableHeaderCell,\n  TableBodyCell\n} from '../styled/typography';\n\nimport {parseLinks} from '../../utils/links-utils.js';\n\nconst CustomLinkWrapper = (path, relativeLinks, config) => {\n  const CustomLink = ({href, ...props}) => {\n    const updatedLink = parseLinks(href, path, relativeLinks, config);\n    return updatedLink ? <GatsbyA to={updatedLink} {...props} /> : <A href={href} {...props} />;\n  };\n  return CustomLink;\n};\n\nconst CustomPre = (props) => {\n  // the point of this component is to distinguish styling of inline <code /> elements\n  // with code blocks (ie <pre><code>...</code></pre>).\n\n  const {children, ...otherProps} = props;\n  return (\n    <Pre {...otherProps}>\n      {React.Children.map(children, (child) => {\n        // this means a child of this <pre> element is a <code> element, or <code> element styled\n        // by Styletron\n        if (child.type === 'code' || child.type.displayName === 'Styled(code)') {\n          return <CodeBlock {...child.props} />;\n        }\n        // else we just clone the element as is\n        return React.cloneElement(child);\n      })}\n    </Pre>\n  );\n};\n\nconst API_REGEX = /^code-classlanguage-text(.*?)code/;\nconst CODE_REGEX = /code-classlanguage-text(.*?)code/g;\n\n// Sanitize auto generated anchor ids\nconst CustomHeader = (ComponentType, id, props, anchors) => {\n  if (!id) {\n    return <ComponentType {...props} />;\n  }\n\n  if (API_REGEX.test(id)) {\n    id = id.match(API_REGEX)[1];\n  } else {\n    id = id.replace(CODE_REGEX, ($0, $1) => $1);\n  }\n  // Make sure we don't have duplicate ids on this page\n  if (anchors[id]) {\n    let suffix = 1;\n    while (anchors[`${id}-${suffix}`]) suffix++;\n    id = `${id}-${suffix}`;\n  }\n  anchors[id] = true;\n\n  const children = props.children.slice();\n  const autolink = children[0];\n  if (autolink.props && autolink.props.href) {\n    children[0] = cloneElement(autolink, {key: 'anchor', href: `#${id}`});\n  }\n  return (\n    <ComponentType {...props} id={id}>\n      {children}\n    </ComponentType>\n  );\n};\n\nexport default (props) => {\n  const {relativeLinks, path, config} = props;\n  // note - we can add many other custom components.\n\n  const anchors = {};\n  const HeaderWrapper = (ComponentType) => {\n    return ({id, ...props}) => CustomHeader(ComponentType, id, props, anchors);\n  };\n\n  const components = {\n    h1: H1,\n    h2: HeaderWrapper(H2),\n    h3: HeaderWrapper(H3),\n    h4: HeaderWrapper(H4),\n    h5: HeaderWrapper(H5),\n    h6: HeaderWrapper(H6),\n    p: P,\n    ul: List,\n    li: ListItem,\n    pre: CustomPre,\n    img: Img,\n    code: InlineCode,\n    table: Table,\n    th: TableHeaderCell,\n    td: TableBodyCell,\n    blockquote: BlockQuote,\n    a: relativeLinks ? CustomLinkWrapper(path, relativeLinks, config) : A\n  };\n\n  return (\n    <MDXProvider components={components}>\n      <MDXRenderer>{props.body}</MDXRenderer>\n    </MDXProvider>\n  );\n};\n"],"file":"markdown.js"}