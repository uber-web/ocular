{"version":3,"sources":["../../../src/utils/links-utils.js"],"names":["path","require","log","COLOR","parseLinks","href","source","relativeLinks","config","startsWith","relPath","replace","HOME_PATH","removeURLPathPrefix","linkFromFileToFile","anchor","match","relativeLink","sourceFile","targetFile","relativePathFromDirToDir","relative","dirname","fileName","basename","join","addToRelativeLinks","target","rootFolder","edge","color","YELLOW","JSON","stringify","relativeToRootFolder","relativeToCurrentSlug","node","fields","absoluteTarget","pathToRemove","result","includes","isInternalURL","to","url","URL","window","location","origin","hostname","module","exports"],"mappings":"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","sourcesContent":["const path = require('path');\nconst {log, COLOR} = require('./log');\n\nconst parseLinks = (href, source, relativeLinks, config) => {\n  // external link\n  if (href.startsWith('http') || href.startsWith('#')) {\n    return null;\n  }\n\n  let relPath = href.replace(/#.*/, '');\n  if (config.HOME_PATH) {\n    relPath = removeURLPathPrefix(relPath, config.HOME_PATH);\n  } else {\n    relPath = linkFromFileToFile(source, relPath);\n  }\n\n  const anchor = href.match(/#.*/);\n  // relative link ie doc to doc\n  const relativeLink = relativeLinks[relPath];\n  if (relativeLink) {\n    return anchor ? relativeLink + anchor[0] : relativeLink;\n  }\n\n  return null;\n};\n// if using simply path.relative(from, to) to files which are in the same folder, the resolved path is: '../to'.\n// instead we do relative path between folders, then add the name of the target file in the end.\n// in that same scenario, the relative path between folders will be '', and overall path just 'to'.\n\nfunction linkFromFileToFile(sourceFile, targetFile) {\n  const relativePathFromDirToDir = path.relative(sourceFile, path.dirname(targetFile));\n  const fileName = path.basename(targetFile, '.md');\n  if (fileName === 'README') {\n    return relativePathFromDirToDir;\n  }\n  return path.join(relativePathFromDirToDir, fileName);\n}\n\nfunction addToRelativeLinks({source, target, rootFolder, edge, relativeLinks}) {\n  // what we are doing here: for each markdown file, we create a mapping of different ways to\n  // link to another markdown file that we will honor.\n\n  // let's suppose that we want to go from a file:\n  // - physical location: /docs/my-files/source.md, slug: /docs/chapter-1/source\n  // to this file:\n  // - phyiscal location: /docs/developer-guide/target.md, slug: /docs/advanced-usage/api-reference/target\n\n  // by default, '../../advanced-usage/api/reference/target' would work (target file slug, relative to original slug)\n  // '/docs/advanced-usage/api-reference/target' would also work (absolute target slug)\n  // however, on github, those links wouldn't work as there is no phyiscal file behind that link.\n  // in github however: '/docs/developer-guide/target.md' (file name relative to root) or\n  // '../developer-guide/target.md' (relative file name) would work. Those links wouldn't work on the gatsby rendered\n  // page however (until that).\n\n  // we are creating a mapping so that ANY OF THESE 4 SYNTAXES would be honored.\n  // So, authors can use links that refer to physical files, and gatsby will render a link that works - the same link\n  // can work on github and gatsby\n\n  // note that often, the physical location and the slug are the same!\n  // However there is no guarantee that this will be the case.\n\n  if (!source || !target) {\n    log.log(\n      {color: COLOR.YELLOW},\n      `couldn't add relative link for: ${JSON.stringify({source, target})}`\n    )();\n    return {};\n  }\n  const relativeToRootFolder = rootFolder && linkFromFileToFile(rootFolder, source);\n  const relativeToCurrentSlug = linkFromFileToFile(edge.node.fields.path, target);\n\n  const absoluteTarget = `/${target}`;\n\n  return {\n    ...relativeLinks,\n    [relativeToRootFolder]: absoluteTarget,\n    [relativeToCurrentSlug]: absoluteTarget,\n    [target]: absoluteTarget\n  };\n}\n\nfunction removeURLPathPrefix(relPath, pathToRemove) {\n  let result = relPath;\n  if (relPath.includes(`/${pathToRemove}/`)) {\n    result = relPath.replace(`/${pathToRemove}/`, '/');\n  } else if (relPath.includes(`${pathToRemove}/`)) {\n    result = relPath.replace(`${pathToRemove}/`, '');\n  } else if (relPath.includes(pathToRemove)) {\n    result = relPath.replace(pathToRemove, '/');\n  }\n  return result;\n}\n\nfunction isInternalURL(to) {\n  try {\n    const url = new URL(to, window.location.origin);\n    return url.hostname === window.location.hostname;\n  } catch {\n    return false;\n  }\n}\n\nmodule.exports.addToRelativeLinks = addToRelativeLinks;\nmodule.exports.parseLinks = parseLinks;\nmodule.exports.isInternalURL = isInternalURL;\nmodule.exports.removeURLPathPrefix = removeURLPathPrefix;\n"],"file":"links-utils.js"}