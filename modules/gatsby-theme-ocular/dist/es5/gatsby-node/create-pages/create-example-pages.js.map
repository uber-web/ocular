{"version":3,"sources":["../../../../src/gatsby-node/create-pages/create-example-pages.js"],"names":["require","log","COLOR","PAGE_TEMPLATES","getExampleThumbnails","allFile","allImageSharp","edges","length","color","YELLOW","priority","idLookup","reduce","lookup","node","id","relativePath","pathLookup","originalImageId","parent","originalImagePath","resize","src","queryExamplesData","graphql","then","result","errors","console","Error","EXAMPLES","data","site","siteMetadata","config","thumbnailsPublicUrls","examplesWithImages","map","example","imageSrc","image","catch","error","BRIGHT_YELLOW","createExampleGalleryPage","examples","examplesToc","createPage","ocularOptions","CYAN","RED","JSON","stringify","componentUrl","component","path","context","title","toc","createIndividualExamplePages","forEach","exampleName","slug","exampleConfig","createExamplesToc","examplesByCategory","category","entries","push","Object","values","module","exports","createExamplePages","actions"],"mappings":";;;;;;;;;;;;;;;;AAAA,eAAqBA,OAAO,CAAC,iBAAD,CAA5B;AAAA,IAAOC,GAAP,YAAOA,GAAP;AAAA,IAAYC,KAAZ,YAAYA,KAAZ;;AAEA,IAAMC,cAAc,GAAGH,OAAO,CAAC,kBAAD,CAA9B;;AAKA,SAASI,oBAAT,OAAwD;AAAA,MAAzBC,OAAyB,QAAzBA,OAAyB;AAAA,MAAhBC,aAAgB,QAAhBA,aAAgB;;AAGtD,MACE,CAACD,OAAD,IACA,CAACA,OAAO,CAACE,KADT,IAEA,CAACF,OAAO,CAACE,KAAR,CAAcC,MAFf,IAGA,CAACF,aAHD,IAIA,CAACA,aAAa,CAACC,KAJf,IAKA,CAACD,aAAa,CAACC,KAAd,CAAoBC,MANvB,EAOE;AACAP,IAAAA,GAAG,CAACA,GAAJ,CAAQ;AAACQ,MAAAA,KAAK,EAAEP,KAAK,CAACQ,MAAd;AAAsBC,MAAAA,QAAQ,EAAE;AAAhC,KAAR;AACA,WAAO,EAAP;AACD;;AAGD,MAAMC,QAAQ,GAAGP,OAAO,CAACE,KAAR,CAAcM,MAAd,CAAqB,UAACC,MAAD,SAAoB;AAAA,QAAVC,IAAU,SAAVA,IAAU;AACxDD,IAAAA,MAAM,CAACC,IAAI,CAACC,EAAN,CAAN,GAAkBD,IAAI,CAACE,YAAvB;AACA,WAAOH,MAAP;AACD,GAHgB,EAGd,EAHc,CAAjB;AASA,MAAMI,UAAU,GAAGZ,aAAa,CAACC,KAAd,CAAoBM,MAApB,CAA2B,UAACC,MAAD,SAAoB;AAAA,QAAVC,IAAU,SAAVA,IAAU;AAChE,QAAMI,eAAe,GAAGJ,IAAI,CAACK,MAAL,CAAYJ,EAApC;AACA,QAAMK,iBAAiB,GAAGT,QAAQ,CAACO,eAAD,CAAlC;AACAL,IAAAA,MAAM,CAACO,iBAAD,CAAN,GAA4BN,IAAI,CAACO,MAAL,CAAYC,GAAxC;AACA,WAAOT,MAAP;AACD,GALkB,EAKhB,EALgB,CAAnB;AAQA,SAAOI,UAAP;AACD;;AAKD,SAASM,iBAAT,CAA2BC,OAA3B,EAAoC;AAClC,SAAOA,OAAO,ynBAAP,CAqCJC,IArCI,CAqCC,UAACC,MAAD,EAAY;AAChB,QAAIA,MAAM,CAACC,MAAX,EAAmB;AAEjBC,MAAAA,OAAO,CAAC5B,GAAR,CAAY0B,MAAM,CAACC,MAAnB;AACA,YAAM,IAAIE,KAAJ,CAAUH,MAAM,CAACC,MAAjB,CAAN;AACD;;AAED,QAAOG,QAAP,GAAmBJ,MAAM,CAACK,IAAP,CAAYC,IAAZ,CAAiBC,YAAjB,CAA8BC,MAAjD,CAAOJ,QAAP;AAEA,QAAMK,oBAAoB,GAAGhC,oBAAoB,CAACuB,MAAM,CAACK,IAAR,CAAjD;AAGA,QAAMK,kBAAkB,GAAGN,QAAQ,CAACO,GAAT,CAAa,UAACC,OAAD;AAAA,6CACnCA,OADmC;AAEtCC,QAAAA,QAAQ,EAAEJ,oBAAoB,CAACG,OAAO,CAACE,KAAT;AAFQ;AAAA,KAAb,CAA3B;AAKA,WAAOJ,kBAAP;AACD,GAvDI,EAwDJK,KAxDI,CAwDE,UAACC,KAAD,EAAW;AAChB1C,IAAAA,GAAG,CAACA,GAAJ,CAAQ;AAACQ,MAAAA,KAAK,EAAEP,KAAK,CAAC0C;AAAd,KAAR,mDAAgFD,KAAhF;AACA,WAAOlB,OAAO,qPAAP,CAaJC,IAbI,CAaC,UAACC,MAAD,EAAY;AAClB,UAAIA,MAAM,CAACC,MAAX,EAAmB;AAEjBC,QAAAA,OAAO,CAAC5B,GAAR,CAAY0B,MAAM,CAACC,MAAnB;AACA,cAAM,IAAIE,KAAJ,CAAUH,MAAM,CAACC,MAAjB,CAAN;AACD;;AACD,UAAOG,QAAP,GAAmBJ,MAAM,CAACK,IAAP,CAAYC,IAAZ,CAAiBC,YAAjB,CAA8BC,MAAjD,CAAOJ,QAAP;AACA,aAAOA,QAAP;AACD,KArBM,CAAP;AAsBD,GAhFI,CAAP;AAiFD;;AAED,SAASc,wBAAT,CAAkCC,QAAlC,EAA4CC,WAA5C,EAAyDC,UAAzD,EAAqEC,aAArE,EAAoF;AAClF,MAAIH,QAAQ,CAACtC,MAAT,KAAoB,CAAxB,EAA2B;AACzB;AACD;;AACDP,EAAAA,GAAG,CAACA,GAAJ,CAAQ;AAACQ,IAAAA,KAAK,EAAEP,KAAK,CAACgD,IAAd;AAAoBvC,IAAAA,QAAQ,EAAE;AAA9B,GAAR;AACAV,EAAAA,GAAG,CAACA,GAAJ,CAAQ;AAACQ,IAAAA,KAAK,EAAEP,KAAK,CAACiD,GAAd;AAAmBxC,IAAAA,QAAQ,EAAE;AAA7B,GAAR,sBAAsDyC,IAAI,CAACC,SAAL,CAAeP,QAAf,CAAtD;AAEA,MAAMQ,YAAY,GAAGnD,cAAc,CAAC,0BAAD,CAAnC;AAEA6C,EAAAA,UAAU,CAAC;AACTO,IAAAA,SAAS,EAAED,YADF;AAETE,IAAAA,IAAI,EAAE,WAFG;AAGTC,IAAAA,OAAO,EAAE;AACPC,MAAAA,KAAK,EAAE,UADA;AAEPC,MAAAA,GAAG,EAAEZ;AAFE;AAHA,GAAD,CAAV;AAQD;;AAED,SAASa,4BAAT,CAAsCd,QAAtC,EAAgDC,WAAhD,EAA6DC,UAA7D,EAAyEC,aAAzE,EAAwF;AACtFH,EAAAA,QAAQ,CAACe,OAAT,CAAiB,UAACtB,OAAD,EAAa;AAC5B,QAAMuB,WAAW,GAAGvB,OAAO,CAACmB,KAA5B;AAEAzD,IAAAA,GAAG,CAACA,GAAJ,CAAQ;AAACQ,MAAAA,KAAK,EAAEP,KAAK,CAACgD,IAAd;AAAoBvC,MAAAA,QAAQ,EAAE;AAA9B,KAAR,kCAAmE4B,OAAO,CAACmB,KAA3E;AAEA,QAAMJ,YAAY,GAAGf,OAAO,CAACe,YAA7B;;AAEA,QAAIA,YAAJ,EAAkB;AAChBN,MAAAA,UAAU,CAAC;AACTQ,QAAAA,IAAI,EAAEjB,OAAO,CAACiB,IADL;AAETD,QAAAA,SAAS,EAAED,YAFF;AAGTG,QAAAA,OAAO,EAAE;AACPC,UAAAA,KAAK,YAAKnB,OAAO,CAACmB,KAAb,aADE;AAEPK,UAAAA,IAAI,EAAExB,OAAO,CAACiB,IAFP;AAGPG,UAAAA,GAAG,EAAEZ,WAHE;AAIPiB,UAAAA,aAAa,EAAEzB;AAJR;AAHA,OAAD,CAAV;AAUD;AACF,GAnBD;AAoBD;;AAED,SAAS0B,iBAAT,CAA2BnB,QAA3B,EAAqC;AACnC,MAAMoB,kBAAkB,GAAG,EAA3B;;AADmC,6CAGbpB,QAHa;AAAA;;AAAA;AAGnC,wDAAgC;AAAA,UAArBP,OAAqB;AAC9B2B,MAAAA,kBAAkB,CAAC3B,OAAO,CAAC4B,QAAT,CAAlB,GAAuCD,kBAAkB,CAAC3B,OAAO,CAAC4B,QAAT,CAAlB,IAAwC;AAC7ET,QAAAA,KAAK,EAAEnB,OAAO,CAAC4B,QAD8D;AAE7EC,QAAAA,OAAO,EAAE;AAFoE,OAA/E;AAKAF,MAAAA,kBAAkB,CAAC3B,OAAO,CAAC4B,QAAT,CAAlB,CAAqCC,OAArC,CAA6CC,IAA7C,CAAkD;AAChDX,QAAAA,KAAK,EAAEnB,OAAO,CAACmB,KADiC;AAEhDF,QAAAA,IAAI,EAAEjB,OAAO,CAACiB,IAFkC;AAGhDf,QAAAA,KAAK,EAAEF,OAAO,CAACC;AAHiC,OAAlD;AAKD;AAdkC;AAAA;AAAA;AAAA;AAAA;;AAgBnC,SAAO8B,MAAM,CAACC,MAAP,CAAcL,kBAAd,CAAP;AACD;;AAEDM,MAAM,CAACC,OAAP,GAAiB,SAASC,kBAAT,QAAgDzB,aAAhD,EAA+D;AAAA,MAAlCxB,OAAkC,SAAlCA,OAAkC;AAAA,MAAzBkD,OAAyB,SAAzBA,OAAyB;AAC9E,MAAO3B,UAAP,GAAqB2B,OAArB,CAAO3B,UAAP;AAEA,SAAOxB,iBAAiB,CAACC,OAAD,CAAjB,CAA2BC,IAA3B,CAAgC,UAACoB,QAAD,EAAc;AACnD,QAAMC,WAAW,GAAGkB,iBAAiB,CAACnB,QAAD,CAArC;AACAD,IAAAA,wBAAwB,CAACC,QAAD,EAAWC,WAAX,EAAwBC,UAAxB,EAAoCC,aAApC,CAAxB;AACAW,IAAAA,4BAA4B,CAACd,QAAD,EAAWC,WAAX,EAAwBC,UAAxB,EAAoCC,aAApC,CAA5B;AACD,GAJM,CAAP;AAKD,CARD","sourcesContent":["const {log, COLOR} = require('../../utils/log');\n\nconst PAGE_TEMPLATES = require('./page-templates');\n\n// assert(CONFIG.EXAMPLES_GALLERY_TEMPLATE_URL && EXAMPLE_TEMPLATE_URL);\n\n// Exracts thumbnails from the sharp query\nfunction getExampleThumbnails({allFile, allImageSharp}) {\n  // this function associates the path of an original image\n  // with the public url of a thumbnail, resized server side by imageSharp.\n  if (\n    !allFile ||\n    !allFile.edges ||\n    !allFile.edges.length ||\n    !allImageSharp ||\n    !allImageSharp.edges ||\n    !allImageSharp.edges.length\n  ) {\n    log.log({color: COLOR.YELLOW, priority: 1}, `No thumbnails created.`)();\n    return {};\n  }\n  // in a first pass, we create a lookup - original path to internal gatsby node id.\n  /* eslint-disable no-param-reassign */\n  const idLookup = allFile.edges.reduce((lookup, {node}) => {\n    lookup[node.id] = node.relativePath;\n    return lookup;\n  }, {});\n\n  // in a second path, we associate each thumbnail with the path of the original\n  // image, using the node id of this original image and the lookup\n  // we just created.\n\n  const pathLookup = allImageSharp.edges.reduce((lookup, {node}) => {\n    const originalImageId = node.parent.id;\n    const originalImagePath = idLookup[originalImageId];\n    lookup[originalImagePath] = node.resize.src;\n    return lookup;\n  }, {});\n\n  /* eslint-enable no-param-reassign */\n  return pathLookup;\n}\n\n// Queries for examples list and thumbnail images\n// First try to query for images, if failure try again without images\n// TODO - figure out how to inject a valid schema for sharp so we don't get exceptions\nfunction queryExamplesData(graphql) {\n  return graphql(`\n    {\n      site {\n        siteMetadata {\n          config {\n            EXAMPLES {\n              category\n              image\n              title\n              path\n              componentUrl\n            }\n          }\n        }\n      }\n      allImageSharp {\n        edges {\n          node {\n            parent {\n              id\n            }\n            resize(width: 400, height: 400, quality: 80) {\n              src\n            }\n          }\n        }\n      }\n      allFile {\n        edges {\n          node {\n            id\n            relativePath\n          }\n        }\n      }\n    }\n  `)\n    .then((result) => {\n      if (result.errors) {\n        /* eslint no-console: \"off\" */\n        console.log(result.errors);\n        throw new Error(result.errors);\n      }\n\n      const {EXAMPLES} = result.data.site.siteMetadata.config;\n      // build a lookup map that matches relative paths of images with their public URLs\n      const thumbnailsPublicUrls = getExampleThumbnails(result.data);\n\n      // matches public urls to paths of images\n      const examplesWithImages = EXAMPLES.map((example) => ({\n        ...example,\n        imageSrc: thumbnailsPublicUrls[example.image]\n      }));\n\n      return examplesWithImages;\n    })\n    .catch((error) => {\n      log.log({color: COLOR.BRIGHT_YELLOW}, `error in createPage query with images: ${error}`)();\n      return graphql(`\n        {\n          site {\n            siteMetadata {\n              config {\n                EXAMPLES {\n                  title\n                  path\n                }\n              }\n            }\n          }\n        }\n      `).then((result) => {\n        if (result.errors) {\n          /* eslint no-console: \"off\" */\n          console.log(result.errors);\n          throw new Error(result.errors);\n        }\n        const {EXAMPLES} = result.data.site.siteMetadata.config;\n        return EXAMPLES;\n      });\n    });\n}\n\nfunction createExampleGalleryPage(examples, examplesToc, createPage, ocularOptions) {\n  if (examples.length === 0) {\n    return;\n  }\n  log.log({color: COLOR.CYAN, priority: 1}, `Creating examples page`)();\n  log.log({color: COLOR.RED, priority: 4}, `with data ${JSON.stringify(examples)}`)();\n\n  const componentUrl = PAGE_TEMPLATES['EXAMPLE_GALLERY_PAGE_URL'];\n\n  createPage({\n    component: componentUrl,\n    path: '/examples',\n    context: {\n      title: 'Examples',\n      toc: examplesToc\n    }\n  });\n}\n\nfunction createIndividualExamplePages(examples, examplesToc, createPage, ocularOptions) {\n  examples.forEach((example) => {\n    const exampleName = example.title;\n\n    log.log({color: COLOR.CYAN, priority: 1}, `Creating example page ${example.title}}`)();\n\n    const componentUrl = example.componentUrl;\n\n    if (componentUrl) {\n      createPage({\n        path: example.path,\n        component: componentUrl,\n        context: {\n          title: `${example.title} Example`,\n          slug: example.path,\n          toc: examplesToc,\n          exampleConfig: example\n        }\n      });\n    }\n  });\n}\n\nfunction createExamplesToc(examples) {\n  const examplesByCategory = {};\n\n  for (const example of examples) {\n    examplesByCategory[example.category] = examplesByCategory[example.category] || {\n      title: example.category,\n      entries: []\n    };\n\n    examplesByCategory[example.category].entries.push({\n      title: example.title,\n      path: example.path,\n      image: example.imageSrc\n    });\n  }\n\n  return Object.values(examplesByCategory);\n}\n\nmodule.exports = function createExamplePages({graphql, actions}, ocularOptions) {\n  const {createPage} = actions;\n\n  return queryExamplesData(graphql).then((examples) => {\n    const examplesToc = createExamplesToc(examples);\n    createExampleGalleryPage(examples, examplesToc, createPage, ocularOptions);\n    createIndividualExamplePages(examples, examplesToc, createPage, ocularOptions);\n  });\n};\n"],"file":"create-example-pages.js"}