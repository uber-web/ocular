{"version":3,"sources":["../../../src/configuration/get-eslint-config.js"],"names":["typescriptConfigs","require","configs","DEFAULT_OPTIONS","react","DEFAULT_CONFIG","extends","plugins","parser","parserOptions","ecmaVersion","env","es2020","globals","globalThis","__VERSION__","rules","getWithoutSet","setWithoutGet","devDependencies","peerDependencies","ignorePatterns","overrides","files","sourceType","project","recommended","indent","SwitchCase","quotes","getReactConfig","options","settings","version","module","exports","getESLintConfig","config"],"mappings":"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","sourcesContent":["const typescriptConfigs = require('@typescript-eslint/eslint-plugin').configs;\n\nconst DEFAULT_OPTIONS = {\n  react: false\n};\n\nconst DEFAULT_CONFIG = {\n  extends: ['uber-es2015', 'prettier', 'prettier/react', 'plugin:import/errors'],\n  plugins: ['import'],\n  parser: 'babel-eslint',\n  parserOptions: {\n    ecmaVersion: 2020\n  },\n  env: {\n    // Note: also sets ecmaVersion\n    es2020: true\n  },\n  globals: {\n    globalThis: 'readonly',\n    __VERSION__: 'readonly'\n  },\n  rules: {\n    'guard-for-in': 0,\n    'generator-star-spacing': 0,\n    'func-names': 0,\n    'no-inline-comments': 0,\n    'no-multi-str': 0,\n    'space-before-function-paren': 0,\n    'accessor-pairs': ['error', {getWithoutSet: false, setWithoutGet: false}],\n    'import/no-unresolved': ['error'],\n    'import/no-extraneous-dependencies': ['error', {devDependencies: false, peerDependencies: true}]\n  },\n  ignorePatterns: ['node_modules', '**/dist*/**/*.js'],\n  overrides: [\n    {\n      // babel-eslint can process TS files, but it doesn't understand types\n      // typescript-eslint has some more advanced rules with type checking\n      files: ['**/*.ts', '**/*.tsx'],\n      parser: '@typescript-eslint/parser',\n      parserOptions: {\n        sourceType: 'module', // we want to use ES modules\n        project: './tsconfig.json'\n      },\n      plugins: ['@typescript-eslint'],\n      rules: {\n        ...typescriptConfigs['eslint-recommended'].rules,\n        ...typescriptConfigs.recommended.rules,\n        ...typescriptConfigs['recommended-requiring-type-checking'].rules,\n        indent: ['warn', 2, {SwitchCase: 1}],\n        quotes: ['warn', 'single'],\n        'no-process-env': 'off',\n        '@typescript-eslint/no-unused-vars': ['warn'],\n        '@typescript-eslint/no-explicit-any': 0,\n        '@typescript-eslint/switch-exhaustiveness-check': ['error'],\n        // Some of JS rules don't always work correctly in TS and\n        // hence need to be reimported as TS rules\n        'no-redeclare': 'off',\n        '@typescript-eslint/no-redeclare': ['warn'],\n        'no-shadow': 'off',\n        '@typescript-eslint/no-shadow': ['warn'],\n        'no-use-before-define': 'off',\n        '@typescript-eslint/no-use-before-define': ['error'],\n        'no-dupe-class-members': 'off',\n        '@typescript-eslint/no-dupe-class-members': ['error']\n      }\n    },\n    {\n      // We can lint through code examples in Markdown as well,\n      // but we don't need to enable all of the rules there\n      files: ['**/*.md'],\n      rules: {\n        'no-undef': 'off',\n        'no-unused-vars': 'off',\n        'no-unused-expressions': 'off',\n        'no-console': 'off',\n        'padded-blocks': 'off'\n      }\n    }\n  ]\n};\n\nfunction getReactConfig(options) {\n  return {\n    extends: ['uber-es2015', 'uber-jsx', 'prettier', 'prettier/react', 'plugin:import/errors'],\n    plugins: ['import', 'react'],\n    settings: {\n      react: {\n        version: options.react\n      }\n    }\n  };\n}\n\nmodule.exports.getESLintConfig = function getESLintConfig(options) {\n  options = {...DEFAULT_OPTIONS, ...options};\n  let config = DEFAULT_CONFIG;\n  if (options.react) {\n    config = {...config, ...getReactConfig(options)};\n  }\n\n  // console.error(config);\n  return config;\n};\n"],"file":"get-eslint-config.js"}