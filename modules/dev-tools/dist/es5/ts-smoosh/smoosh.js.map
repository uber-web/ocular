{"version":3,"sources":["../../../src/ts-smoosh/smoosh.js"],"names":["ts","require","fs","path","log","prettier","prettierConfig","suffix","smoosh","base","options","smooshedSrc","returnSmooshed","outputFile","writeFileSync","logSuccess","declDoesntExist","typeAliases","declarations","imports","dtsFile","decls","existsSync","parseDts","jsFile","enrichedJsNode","enrichJs","resultFile","createSourceFile","ScriptTarget","Latest","ScriptKind","TSX","printer","createPrinter","newLine","NewLineKind","LineFeed","printNode","EmitHint","Unspecified","cleanedSrc","replaceExportDeclareType","withoutJSDoc","format","filepath","parsed","readFileSync","aggregateDecl","statement","kind","SyntaxKind","getIdentifierName","type","push","declarationList","map","endsWith","message","console","warn","statements","forEach","dts","findSource","node","typeSource","jsDoc","typeTag","tags","find","tag","tagName","escapedText","fileName","typeExpression","argument","literal","text","identifier","qualifier","dir","dirname","fullPath","resolve","importedDts","importedType","transformer","context","importsToFind","rootNode","visit","concat","flatMap","d","filter","join","factory","updateFunctionDeclaration","decorators","modifiers","asteriskToken","name","typeParameters","parameters","p","i","updateParameterDeclaration","dotDotDotToken","questionToken","cloneType","initializer","body","updateVariableDeclaration","exclamationToken","updateArrowFunction","equalsGreaterThanToken","visitEachChild","newRoot","visitNode","importsForTypes","createImportDeclaration","undefined","createImportClause","createNamedImports","createImportSpecifier","createIdentifier","createStringLiteral","updateSourceFile","transform","transformed","typeName","createTypeReferenceNode","RE","replace","reT","reI","module","exports"],"mappings":"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","sourcesContent":["const ts = require('typescript');\nconst fs = require('fs');\nconst path = require('path');\nconst log = require('./log');\n\nconst prettier = require('prettier');\n// @ts-ignore\nconst prettierConfig = require('../configuration/get-prettier-config')();\n\nconst suffix = 'ts';\n\n/**\n * Writes the result of smooshing to a file\n */\nfunction smoosh(base, options = {}) {\n  const smooshedSrc = returnSmooshed(base, options);\n\n  const outputFile = `./${base}.${suffix}`;\n\n  fs.writeFileSync(outputFile, smooshedSrc, 'utf8');\n  log.logSuccess(`Smooshed ${outputFile}`);\n}\n\nconst declDoesntExist = {typeAliases: [], declarations: [], imports: []};\n\nfunction returnSmooshed(base, options = {}) {\n  const dtsFile = `${base}.d.ts`;\n  // TODO(btford): log a warning here?\n  const decls = fs.existsSync(dtsFile) ? parseDts(dtsFile) : declDoesntExist;\n\n  const jsFile = `${base}.js`;\n  const enrichedJsNode = enrichJs(jsFile, decls);\n\n  const outputFile = `${base}.${suffix}`;\n\n  const resultFile = ts.createSourceFile(\n    outputFile,\n    '',\n    ts.ScriptTarget.Latest,\n    false,\n    ts.ScriptKind.TSX\n  );\n\n  const printer = ts.createPrinter({newLine: ts.NewLineKind.LineFeed});\n\n  const smooshedSrc = printer.printNode(ts.EmitHint.Unspecified, enrichedJsNode, resultFile);\n\n  const cleanedSrc = replaceExportDeclareType(withoutJSDoc(smooshedSrc));\n  // @ts-ignore\n  return options.prettier\n    ? prettier.format(cleanedSrc, {...prettierConfig, filepath: jsFile})\n    : cleanedSrc;\n}\n\nfunction parseDts(dtsFile) {\n  const parsed = ts.createSourceFile(\n    dtsFile,\n    fs.readFileSync(dtsFile, 'utf8'),\n    ts.ScriptTarget.Latest\n  );\n\n  // these are going on top\n  const typeAliases = [];\n  const declarations = {};\n  const imports = [];\n\n  const aggregateDecl = (statement) => {\n    const kind = ts.SyntaxKind[statement.kind];\n\n    if (kind === 'TypeAliasDeclaration') {\n      declarations[getIdentifierName(statement)] = statement.type;\n      // console.log(statement && statement.name && statement.name.escapedText)\n      typeAliases.push(statement);\n      return;\n    }\n    if (kind === 'InterfaceDeclaration') {\n      declarations[getIdentifierName(statement)] = statement;\n      typeAliases.push(statement);\n      return;\n    }\n    if (kind === 'ImportDeclaration') {\n      imports.push(statement);\n      return;\n    }\n\n    if (kind === 'FirstStatement') {\n      // eslint-disable-next-line consistent-return\n      return statement.declarationList.declarations.map(aggregateDecl);\n    }\n\n    if (!kind.endsWith('Declaration')) {\n      const message = `Unexpected statement kind \"${kind}\" in type definition file \"${dtsFile}\"`;\n      // eslint-disable-next-line consistent-return\n      return console.warn(message);\n    }\n    declarations[getIdentifierName(statement)] = statement;\n  };\n\n  parsed.statements.forEach(aggregateDecl);\n\n  return {typeAliases, declarations, imports};\n}\n\nfunction enrichJs(jsFile, dts) {\n  const parsed = ts.createSourceFile(\n    jsFile,\n    fs.readFileSync(jsFile, 'utf8'),\n    ts.ScriptTarget.Latest\n  );\n\n  const findSource = (node) => {\n    let typeSource = null;\n\n    // First, search for a jsdoc tag with the type, like:\n    // @type {typeof import('./b').Noop}\n    if (node.jsDoc) {\n      const typeTag = (node.jsDoc[0].tags || []).find((tag) => tag.tagName.escapedText === 'type');\n      if (typeTag) {\n        const fileName = typeTag.typeExpression.type.argument.literal.text;\n        const identifier = typeTag.typeExpression.type.qualifier.escapedText;\n        const dir = path.dirname(jsFile);\n        const fullPath = path.resolve(dir, `${fileName}.d.ts`);\n        const importedDts = parseDts(fullPath);\n        const importedType = importedDts.declarations[identifier];\n        if (!importedType) {\n          console.warn(\n            `Could not find ${identifier} in ${fullPath} while trying to smoosh ${jsFile}`\n          );\n          return node;\n        }\n        typeSource = importedType;\n      }\n    }\n\n    // Second, use the d.ts file with the same name as this file.\n    if (!typeSource) {\n      typeSource = dts.declarations[getIdentifierName(node)];\n    }\n\n    return typeSource;\n  };\n\n  const transformer = (context) => {\n    let importsToFind = [];\n    return (rootNode) => {\n      function visit(node) {\n        const kind = ts.SyntaxKind[node.kind];\n        importsToFind = importsToFind.concat(\n          (node.jsDoc || [])\n            .flatMap((d) => (d.tags || []).filter((tag) => tag.tagName.escapedText === 'typedef'))\n            .flatMap((typeTag) => {\n              const fileName = typeTag.typeExpression.type.argument.literal.text;\n              const identifier = typeTag.typeExpression.type.qualifier.escapedText;\n\n              // skip adding imports for js/d.ts pairs. We automatically merge imports\n              // for that below.\n              if (\n                path.resolve(jsFile) ===\n                path.resolve(`${path.join(path.dirname(jsFile), fileName)}.js'`)\n              ) {\n                return [];\n              }\n\n              return [{fileName, identifier}];\n            })\n        );\n\n        //\n        if (kind.endsWith('Declaration')) {\n          if (kind === 'FunctionDeclaration') {\n            const typeSource = findSource(node);\n            delete node.jsDoc;\n            if (typeSource) {\n              return ts.factory.updateFunctionDeclaration(\n                node,\n                node.decorators,\n                node.modifiers,\n                node.asteriskToken,\n                node.name,\n                typeSource.typeParameters,\n                node.parameters.map((p, i) =>\n                  ts.factory.updateParameterDeclaration(\n                    p,\n                    p.decorators,\n                    p.modifiers,\n                    p.dotDotDotToken,\n                    p.name,\n                    p.questionToken,\n                    cloneType(typeSource.parameters[i]),\n                    p.initializer\n                  )\n                ),\n                cloneType(typeSource),\n                node.body\n              );\n            }\n            return node;\n          } else if (kind === 'VariableDeclaration') {\n            const typeSource = findSource(node);\n            if (typeSource) {\n              // Account for the case where the d.ts file is a fn decl,\n              // but this file is a variable decl\n              // eslint-disable-next-line max-depth\n              if (\n                ts.SyntaxKind[typeSource.kind] === 'FunctionDeclaration' &&\n                ts.SyntaxKind[node.initializer.kind] === 'ArrowFunction'\n              ) {\n                return ts.factory.updateVariableDeclaration(\n                  node,\n                  node.name,\n                  node.exclamationToken,\n                  node.type,\n                  ts.factory.updateArrowFunction(\n                    node.initializer,\n                    node.initializer.modifiers,\n                    typeSource.typeParameters,\n                    node.initializer.parameters.map((p, i) =>\n                      ts.factory.updateParameterDeclaration(\n                        p,\n                        p.decorators,\n                        p.modifiers,\n                        p.dotDotDotToken,\n                        p.name,\n                        p.questionToken,\n                        cloneType(typeSource.parameters[i]),\n                        p.initializer\n                      )\n                    ),\n                    cloneType(typeSource),\n                    node.initializer.equalsGreaterThanToken,\n                    node.initializer.body\n                  )\n                );\n              }\n\n              return ts.factory.updateVariableDeclaration(\n                node,\n                node.name,\n                node.exclamationToken,\n                typeSource.type,\n                node.initializer\n              );\n            }\n            return node;\n          }\n\n          return node;\n        }\n\n        return ts.visitEachChild(node, visit, context);\n      }\n      const newRoot = ts.visitNode(rootNode, visit);\n\n      // TODO: should we dedupe/combine these imports?\n\n      const importsForTypes = importsToFind.map(({identifier, fileName}) =>\n        ts.factory.createImportDeclaration(\n          undefined,\n          undefined,\n          ts.factory.createImportClause(\n            true,\n            undefined,\n            ts.factory.createNamedImports([\n              ts.factory.createImportSpecifier(undefined, ts.factory.createIdentifier(identifier))\n            ])\n          ),\n          ts.factory.createStringLiteral(fileName)\n        )\n      );\n\n      return ts.factory.updateSourceFile(newRoot, [\n        ...dts.imports,\n        ...importsForTypes,\n        ...dts.typeAliases,\n        ...newRoot.statements\n      ]);\n    };\n  };\n\n  return ts.transform(parsed, [transformer]).transformed[0];\n}\n\nfunction cloneType(node) {\n  if (!node.type) {\n    console.log(node);\n  }\n  return node.type && node.type.typeName\n    ? // If the node has a name, we clone it. Referencing the type nodes from the\n      // d.ts file directly seems to break code comments.\n      ts.factory.createTypeReferenceNode(node.type.typeName.escapedText)\n    : // this should be a built-in type (like `string`, `number`, etc.)\n      node.type;\n}\n\nfunction getIdentifierName(node) {\n  return node.name.escapedText;\n}\n\n// Removing JSDoc comments post-hoc with a regex is less-than-ideal, but it does not\n// appear that there is a way to update nodes returned from the typescript compiler\n// with respect to JSDocs. I see APIs for creating new nodes, but no way to attach em to arbitrary fields.\nconst RE = /^[ ]*\\/?\\*?\\*?[ ]*\\@(type|typedef)(.*)$/gm;\nfunction withoutJSDoc(text) {\n  return text.replace(RE, '');\n}\n\n// HACK export declare type is not allowed in ts prettier\nfunction replaceExportDeclareType(text) {\n  const reT = /^export declare type /gm;\n  const reI = /^export declare interface /gm;\n  return text.replace(reT, 'export type ').replace(reI, 'export interface ');\n}\n\nmodule.exports = {\n  smoosh,\n  returnSmooshed\n};\n"],"file":"smoosh.js"}