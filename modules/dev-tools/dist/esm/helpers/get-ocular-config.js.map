{"version":3,"sources":["../../../src/helpers/get-ocular-config.js"],"names":["fs","require","resolve","getAliases","shallowMerge","module","exports","getOcularConfig","options","packageRoot","root","process","env","PWD","IS_MONOREPO","existsSync","config","babel","configPath","getValidPath","__dirname","extensions","lint","paths","aliases","entry","test","bench","size","webpack","version","userConfig","getUserConfig","Object","assign","aliasMode","userConfigPath","Error","resolveOrder","find","path"],"mappings":"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","sourcesContent":["/* @typedef {import('./get-ocular-config')} default */\n\nconst fs = require('fs');\nconst {resolve} = require('path');\nconst getAliases = require('../../node/aliases');\nconst {shallowMerge} = require('../utils/utils');\n\nmodule.exports.getOcularConfig = function getOcularConfig(options = {}) {\n  const packageRoot = options.root || process.env.PWD;\n\n  const IS_MONOREPO = fs.existsSync(resolve(packageRoot, './modules'));\n\n  const config = {\n    babel: {\n      configPath: getValidPath([\n        resolve(packageRoot, './.babelrc.js'),\n        resolve(packageRoot, './.babelrc'),\n        resolve(packageRoot, './babel.config.js'),\n        resolve(__dirname, './babel.config.js')\n      ]),\n      extensions: ['.es6', '.js', '.es', '.jsx', '.mjs']\n    },\n\n    lint: {\n      paths: IS_MONOREPO ? ['modules'] : ['src'],\n      extensions: ['js', 'md']\n    },\n\n    aliases: {},\n\n    entry: {\n      test: 'test/index',\n      'test-browser': 'test/browser',\n      bench: 'test/bench/index',\n      'bench-browser': 'test/bench/browser',\n      size: 'test/size'\n    },\n\n    webpack: {\n      version: 4,\n      configPath: getValidPath([\n        resolve(packageRoot, './webpack.config.js'),\n        resolve(__dirname, './webpack.config.js')\n      ])\n    }\n  };\n\n  const userConfig = getUserConfig(packageRoot, options);\n\n  shallowMerge(config, userConfig);\n\n  // const aliasMode = userConfig.aliasMode || options.aliasMode;\n\n  // User's aliases need to come first, due to module-alias resolve order\n  Object.assign(config.aliases, getAliases(userConfig.aliasMode, packageRoot));\n\n  return config;\n};\n\n// HELPERS\n\n/**\n * TODO better error messages\n * @param {string} packageRoot\n * @param {object} options\n * @returns\n */\nfunction getUserConfig(packageRoot, options) {\n  let userConfig = null;\n\n  let userConfigPath;\n\n  // Standard config file\n  userConfigPath = resolve(packageRoot, './.ocularrc.js');\n  if (fs.existsSync(userConfigPath)) {\n    userConfig = require(userConfigPath);\n    if (typeof userConfig === 'function') {\n      userConfig = userConfig(options);\n    }\n  }\n  // Compatibility with type:module packages\n  userConfigPath = resolve(packageRoot, './.ocularrc.cjs');\n  if (fs.existsSync(userConfigPath)) {\n    userConfig = require(userConfigPath);\n    if (typeof userConfig === 'function') {\n      userConfig = userConfig(options);\n    }\n  }\n  // Backward compatibility\n  userConfigPath = resolve(packageRoot, './ocular.config.js');\n  if (fs.existsSync(userConfigPath)) {\n    userConfig = require(userConfigPath);\n    if (typeof userConfig === 'function') {\n      userConfig = userConfig(options);\n    }\n  }\n  userConfigPath = resolve(packageRoot, './ocular-dev-tools.config.js');\n  if (fs.existsSync(userConfigPath)) {\n    userConfig = require(userConfigPath);\n    if (typeof userConfig === 'function') {\n      userConfig = userConfig(options);\n    }\n  }\n\n  if (!userConfig) {\n    throw new Error('No valid user config found in .ocularrc.js');\n  }\n\n  return userConfig;\n}\n\nfunction getValidPath(resolveOrder) {\n  return resolveOrder.find((path) => fs.existsSync(path));\n}\n"],"file":"get-ocular-config.js"}