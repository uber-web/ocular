{"version":3,"sources":["../../../src/test-utils/tape-assertions.js"],"names":["require","equals","_withEpsilon","tapeEquals","t","a","b","msg","extra","valid","_assert","message","operator","actual","expected","tapeEqualsEpsilon","epsilon"],"mappings":"AAAA,eAA+BA,OAAO,CAAC,SAAD,CAAtC;AAAA,IAAOC,MAAP,YAAOA,MAAP;AAAA,IAAeC,YAAf,YAAeA,YAAf;;AAKA,OAAO,SAASC,UAAT,CAAoBC,CAApB,EAAuBC,CAAvB,EAA0BC,CAA1B,EAA6BC,GAA7B,EAAkCC,KAAlC,EAAyC;AAE9C,MAAIC,KAAK,GAAG,KAAZ;;AACA,MAAIJ,CAAC,CAACJ,MAAN,EAAc;AACZQ,IAAAA,KAAK,GAAGJ,CAAC,CAACJ,MAAF,CAASK,CAAT,CAAR;AACD,GAFD,MAEO,IAAIA,CAAC,CAACL,MAAN,EAAc;AACnBQ,IAAAA,KAAK,GAAGH,CAAC,CAACL,MAAF,CAASI,CAAT,CAAR;AACD,GAFM,MAEA;AACLI,IAAAA,KAAK,GAAGR,MAAM,CAACI,CAAD,EAAIC,CAAJ,CAAd;AACD;;AACDF,EAAAA,CAAC,CAACM,OAAF,CAAUD,KAAV,EAAiB;AACfE,IAAAA,OAAO,EAAEJ,GAAG,IAAI,iBADD;AAEfK,IAAAA,QAAQ,EAAE,OAFK;AAGfC,IAAAA,MAAM,EAAER,CAHO;AAIfS,IAAAA,QAAQ,EAAER,CAJK;AAKfE,IAAAA,KAAK,EAALA;AALe,GAAjB;AAOD;AAGD,OAAO,SAASO,iBAAT,CAA2BX,CAA3B,EAA8BC,CAA9B,EAAiCC,CAAjC,EAAoCU,OAApC,EAA6CT,GAA7C,EAAkDC,KAAlD,EAAyD;AAC9D,SAAON,YAAY,CAACc,OAAD,EAAU;AAAA,WAAMb,UAAU,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,GAAV,EAAeC,KAAf,CAAhB;AAAA,GAAV,CAAnB;AACD","sourcesContent":["const {equals, _withEpsilon} = require('math.gl');\n\n// FOR TAPE TESTING\n// Use tape assert to compares using a.equals(b)\n// Usage test(..., t => { tapeEquals(t, a, b, ...); });\nexport function tapeEquals(t, a, b, msg, extra) {\n  /* eslint-disable no-invalid-this */\n  let valid = false;\n  if (a.equals) {\n    valid = a.equals(b);\n  } else if (b.equals) {\n    valid = b.equals(a);\n  } else {\n    valid = equals(a, b);\n  }\n  t._assert(valid, {\n    message: msg || 'should be equal',\n    operator: 'equal',\n    actual: a,\n    expected: b,\n    extra\n  });\n}\n\n// eslint-disable-next-line max-params\nexport function tapeEqualsEpsilon(t, a, b, epsilon, msg, extra) {\n  return _withEpsilon(epsilon, () => tapeEquals(t, a, b, msg, extra));\n}\n"],"file":"tape-assertions.js"}